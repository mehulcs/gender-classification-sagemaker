#!/usr/bin/env python
import os
import random
import glob
import cv2
import numpy as np
import sklearn
import json
import keras

# Layers
from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation
from keras.layers.core import Flatten
from keras.layers.core import Dropout
from keras.layers.core import Dense

from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam

# Path to directories as per sagemaker specification

# /opt/ml
# ├── input
# │   ├── config
# │   │   ├── hyperparameters.json
# │   │   └── resourceConfig.json
# │   └── data
# │       └── <channel_name>
# │           └── <input data>
# ├── model
# │
# ├── code
# │   └── <script files>
# │
# └── output
# └── failure

WORK_DIR = '/opt/ml/'

PARAMETER_FILE_PATH = os.path.join(
    WORK_DIR, 'input/config/hyperparameters.json'
)
DATASET_DIR_PATH = os.path.join(WORK_DIR, 'input/data/training')

SAVE_MODEL_PATH = os.path.join(WORK_DIR, 'model', 'model.h5')
OUTPUT_DIR_PATH = os.path.join(WORK_DIR, 'output')


# Read dataset file names from /opt/ml/input/data/{channel}
# Sagemaker moves dataset to these directory from S3 before running this script
images_file_path = [
    filePath for filePath in glob.glob(DATASET_DIR_PATH + "/**/*", recursive=True) if not os.path.isdir(filePath)
]
random.seed(42)
random.shuffle(images_file_path)


# Variables
epochs = 100
lr = 1e-3
batch_size = 64
input_image_dimensions = (96, 96, 3)  # Height, Weight, Channels(RGB)
data = []
labels = []


# Read/Crop images from path as numpy array and append in data, and label in labels
def readImageFiles():
    for img_path in images_file_path:
        image = cv2.imread(img_path)
        image = cv2.resize(
            image, (input_image_dimensions[0], input_image_dimensions[1]))
        image = img_to_array(image)
        data.append(image)

        label = img_path.split(os.path.sep)[-2]
        if label == "men":
            label = 0
        else:
            label = 1
        labels.append([label])

    data = np.array(data, dtype="float") / 255.0
    labels = np.array(labels)


def createModel():
    model = Sequential([
        Conv2D(32, (3, 3), padding="same",
               input_shape=input_shape, activation='relu'),
        MaxPooling2D(pool_size=(3, 3)),
        Dropout(0.25),

        Conv2D(64, (3, 3), padding="same", activation='relu'),
        Conv2D(64, (3, 3), padding="same", activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.25),

        Conv2D(128, (3, 3), padding="same", activation='relu'),
        Conv2D(128, (3, 3), padding="same", activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.25),

        Flatten(),
        Dense(1024, activation='relu'),
        Dropout(0.5),

        Dense(2),
        Activation("sigmoid"),
    ])
    return model


def train():
    readImageFiles()
    
    # Split train and test data
    (trainX, testX, trainY, testY) = sklearn.model_selection.train_test_split(
        data, labels, test_size=0.2, random_state=42
    )
    trainY = keras.utils.to_categorical(trainY, num_classes=2)
    testY = keras.utils.to_categorical(testY, num_classes=2)

    generator = ImageDataGenerator(
        rotation_range=25,
        width_shift_range=0.1,
        height_shift_range=0.1,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode="nearest"
    )

    model = createModel()

    optimizer = Adam(lr=lr, decay=lr/epochs)
    model.compile(loss="binary_crossentropy",
                  optimizer=optimizer, metrics=["accuracy"])

    model.fit_generator(
        generator.flow(trainX, trainY, batch_size=batch_size),
        validation_data=(testX, testY),
        steps_per_epoch=len(trainX) // batch_size,
        epochs=epochs,
        verbose=1
    )

    model.save(SAVE_MODEL_PATH)


def parseHyperParameters():
    hyperParams = {}
    with open(PARAMETER_FILE_PATH, 'r') as tc:
        hyperParams = json.load(tc)

    epochs = hyperParams.get('epochs', 100)
    batch_size = hyperParams.get('batch_size', 64)


if __name__ == '__main__':
    parseHyperParameters()
    train()
    sys.exit(0)
